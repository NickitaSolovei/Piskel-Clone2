!function(e){var t={};function a(r){if(t[r])return t[r].exports;var n=t[r]={i:r,l:!1,exports:{}};return e[r].call(n.exports,n,n.exports,a),n.l=!0,n.exports}a.m=e,a.c=t,a.d=function(e,t,r){a.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},a.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},a.t=function(e,t){if(1&t&&(e=a(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(a.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)a.d(r,n,function(t){return e[t]}.bind(null,n));return r},a.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return a.d(t,"a",t),t},a.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},a.p="/",a(a.s=0)}([function(e,t,a){a(2),e.exports=a(1)},function(e,t,a){},function(e,t,a){"use strict";a.r(t);const r={pen:document.querySelector(".pen"),mirrorPen:document.querySelector(".vertical-mirror-pen"),paintBucket:document.querySelector(".paint-bucket"),eraser:document.querySelector(".eraser"),paintAllPixels:document.querySelector(".paint-All-pixels"),stroke:document.querySelector(".stroke"),move:document.querySelector(".move"),rectangle:document.querySelector(".rectangle"),circle:document.querySelector(".circle"),lighten:document.querySelector(".lighten"),dithering:document.querySelector(".dithering"),colorPicker:document.querySelector(".color-picker")},n=[];function i(e,t){if(!e.classList.contains("selectedTool")){document.querySelector(".selectedTool").classList.remove("selectedTool"),e.classList.add("selectedTool"),t.selectedTool=e}}function o(e,t){const a=Math.floor((t.pageX-e.coords.left)/(e.realWidthCanvas/e.widthFrame)),r=Math.floor((t.pageY-e.coords.top)/(e.realWidthCanvas/e.widthFrame));if(e.context.fillRect(a*(e.realWidthCanvas/e.widthFrame),r*(e.realWidthCanvas/e.widthFrame),e.realWidthCanvas/e.widthFrame,e.realWidthCanvas/e.widthFrame),e.prevPoint.x){const t=a-e.prevPoint.x,n=r-e.prevPoint.y;let i,o;if(Math.abs(t)>Math.abs(n)&&Math.abs(t)>1){o=n;for(let a=(i=t)/Math.abs(i);Math.abs(a)<Math.abs(i);a+=i/Math.abs(i)){const t=Math.round(o*(Math.abs(a)/Math.abs(i)));e.context.fillRect((e.prevPoint.x+a)*(e.realWidthCanvas/e.widthFrame),(e.prevPoint.y+t)*(e.realWidthCanvas/e.widthFrame),e.realWidthCanvas/e.widthFrame,e.realWidthCanvas/e.widthFrame)}}else if(Math.abs(n)>1){o=t;for(let t=(i=n)/Math.abs(i);Math.abs(t)<Math.abs(i);t+=i/Math.abs(i)){const a=Math.round(o*(Math.abs(t)/Math.abs(i)));e.context.fillRect((e.prevPoint.x+a)*(e.realWidthCanvas/e.widthFrame),(e.prevPoint.y+t)*(e.realWidthCanvas/e.widthFrame),e.realWidthCanvas/e.widthFrame,e.realWidthCanvas/e.widthFrame)}}}e.prevPoint.x=a,e.prevPoint.y=r}function l(e){e.prevPoint.x=null,e.prevPoint.y=null}function s(e){document.querySelector(".selected").src=e.toDataURL()}function d(e,t,a,n){const i=document.querySelector("body");e.selectedTool!==r.pen&&e.selectedTool!==r.eraser&&e.selectedTool!==r.mirrorPen&&e.selectedTool!==r.dithering||(e.canvasMain.removeEventListener("mousemove",t),e.canvasMain.removeEventListener("mouseout",a),i.removeEventListener("mouseup",n),e.prevPoint.x=null,e.prevPoint.y=null),e.selectedTool!==r.stroke&&e.selectedTool!==r.move&&e.selectedTool!==r.rectangle&&e.selectedTool!==r.circle&&e.selectedTool!==r.lighten||(e.canvasMain.removeEventListener("mousemove",t),e.canvasMain.removeEventListener("mouseout",a),i.removeEventListener("mouseup",n)),s(e.canvasMain)}function c(e,t){const a=e.canvasMain.getContext("2d"),r=Math.floor((t.pageX-e.coords.left)/(e.realWidthCanvas/e.widthFrame)),n=Math.floor((t.pageY-e.coords.top)/(e.realWidthCanvas/e.widthFrame));if(a.fillRect(r*(e.realWidthCanvas/e.widthFrame),n*(e.realWidthCanvas/e.widthFrame),e.realWidthCanvas/e.widthFrame,e.realWidthCanvas/e.widthFrame),t.ctrlKey?a.fillRect(r*(e.realWidthCanvas/e.widthFrame),(e.widthFrame-1-n)*(e.realWidthCanvas/e.widthFrame),e.realWidthCanvas/e.widthFrame,e.realWidthCanvas/e.widthFrame):t.shiftKey?(a.fillRect((e.widthFrame-1-r)*(e.realWidthCanvas/e.widthFrame),n*(e.realWidthCanvas/e.widthFrame),e.realWidthCanvas/e.widthFrame,e.realWidthCanvas/e.widthFrame),a.fillRect(r*(e.realWidthCanvas/e.widthFrame),(e.widthFrame-1-n)*(e.realWidthCanvas/e.widthFrame),e.realWidthCanvas/e.widthFrame,e.realWidthCanvas/e.widthFrame),a.fillRect((e.widthFrame-1-r)*(e.realWidthCanvas/e.widthFrame),(e.widthFrame-1-n)*(e.realWidthCanvas/e.widthFrame),e.realWidthCanvas/e.widthFrame,e.realWidthCanvas/e.widthFrame)):a.fillRect((e.widthFrame-1-r)*(e.realWidthCanvas/e.widthFrame),n*(e.realWidthCanvas/e.widthFrame),e.realWidthCanvas/e.widthFrame,e.realWidthCanvas/e.widthFrame),e.prevPoint.x){const i=r-e.prevPoint.x,o=n-e.prevPoint.y;let l,s;if(Math.abs(i)>Math.abs(o)&&Math.abs(i)>1){s=o;for(let r=(l=i)/Math.abs(l);Math.abs(r)<Math.abs(l);r+=l/Math.abs(l)){const n=Math.round(s*(Math.abs(r)/Math.abs(l)));a.fillRect((e.prevPoint.x+r)*(e.realWidthCanvas/e.widthFrame),(e.prevPoint.y+n)*(e.realWidthCanvas/e.widthFrame),e.realWidthCanvas/e.widthFrame,e.realWidthCanvas/e.widthFrame),t.ctrlKey?a.fillRect((e.prevPoint.x+r)*(e.realWidthCanvas/e.widthFrame),(e.widthFrame-1-(e.prevPoint.y+n))*(e.realWidthCanvas/e.widthFrame),e.realWidthCanvas/e.widthFrame,e.realWidthCanvas/e.widthFrame):t.shiftKey?(a.fillRect((e.widthFrame-1-(e.prevPoint.x+r))*(e.realWidthCanvas/e.widthFrame),(e.prevPoint.y+n)*(e.realWidthCanvas/e.widthFrame),e.realWidthCanvas/e.widthFrame,e.realWidthCanvas/e.widthFrame),a.fillRect((e.prevPoint.x+r)*(e.realWidthCanvas/e.widthFrame),(e.widthFrame-1-(e.prevPoint.y+n))*(e.realWidthCanvas/e.widthFrame),e.realWidthCanvas/e.widthFrame,e.realWidthCanvas/e.widthFrame),a.fillRect((e.widthFrame-1-(e.prevPoint.x+r))*(e.realWidthCanvas/e.widthFrame),(e.widthFrame-1-(e.prevPoint.y+n))*(e.realWidthCanvas/e.widthFrame),e.realWidthCanvas/e.widthFrame,e.realWidthCanvas/e.widthFrame)):a.fillRect((e.widthFrame-1-(e.prevPoint.x+r))*(e.realWidthCanvas/e.widthFrame),(e.prevPoint.y+n)*(e.realWidthCanvas/e.widthFrame),e.realWidthCanvas/e.widthFrame,e.realWidthCanvas/e.widthFrame)}}else if(Math.abs(o)>1){s=i;for(let r=(l=o)/Math.abs(l);Math.abs(r)<Math.abs(l);r+=l/Math.abs(l)){const n=Math.round(s*(Math.abs(r)/Math.abs(l)));a.fillRect((e.prevPoint.x+n)*(e.realWidthCanvas/e.widthFrame),(e.prevPoint.y+r)*(e.realWidthCanvas/e.widthFrame),e.realWidthCanvas/e.widthFrame,e.realWidthCanvas/e.widthFrame),t.ctrlKey?a.fillRect((e.prevPoint.x+n)*(e.realWidthCanvas/e.widthFrame),(e.widthFrame-1-(e.prevPoint.y+r))*(e.realWidthCanvas/e.widthFrame),e.realWidthCanvas/e.widthFrame,e.realWidthCanvas/e.widthFrame):t.shiftKey?(a.fillRect((e.widthFrame-1-(e.prevPoint.x+n))*(e.realWidthCanvas/e.widthFrame),(e.prevPoint.y+r)*(e.realWidthCanvas/e.widthFrame),e.realWidthCanvas/e.widthFrame,e.realWidthCanvas/e.widthFrame),a.fillRect((e.prevPoint.x+n)*(e.realWidthCanvas/e.widthFrame),(e.widthFrame-1-(e.prevPoint.y+r))*(e.realWidthCanvas/e.widthFrame),e.realWidthCanvas/e.widthFrame,e.realWidthCanvas/e.widthFrame),a.fillRect((e.widthFrame-1-(e.prevPoint.x+n))*(e.realWidthCanvas/e.widthFrame),(e.widthFrame-1-(e.prevPoint.y+r))*(e.realWidthCanvas/e.widthFrame),e.realWidthCanvas/e.widthFrame,e.realWidthCanvas/e.widthFrame)):a.fillRect((e.widthFrame-1-(e.prevPoint.x+n))*(e.realWidthCanvas/e.widthFrame),(e.prevPoint.y+r)*(e.realWidthCanvas/e.widthFrame),e.realWidthCanvas/e.widthFrame,e.realWidthCanvas/e.widthFrame)}}}a.fillRect(r*(e.realWidthCanvas/e.widthFrame),n*(e.realWidthCanvas/e.widthFrame),e.realWidthCanvas/e.widthFrame,e.realWidthCanvas/e.widthFrame),e.prevPoint.x=r,e.prevPoint.y=n}function h(e,t,a,r){const n=r.canvasMain.getContext("2d").getImageData(e*(r.realWidthCanvas/r.widthFrame),t*(r.realWidthCanvas/r.widthFrame),1,1).data,i=n[0],o=n[1],l=n[2];return i===a[0]&&o===a[1]&&l===a[2]}function m(e,t,a){a.context.fillRect(e*(a.realWidthCanvas/a.widthFrame),t*(a.realWidthCanvas/a.widthFrame),a.realWidthCanvas/a.widthFrame,a.realWidthCanvas/a.widthFrame)}function v(e,t){const a=Math.floor((event.pageX-t.coords.left)/(t.realWidthCanvas/t.widthFrame)),r=Math.floor((event.pageY-t.coords.top)/(t.realWidthCanvas/t.widthFrame));e.x=a,e.y=r}function u(e){const t=e.toString(16);return 1===t.length?`0${t}`:t}function p(e,t,a){return`#${u(e)}${u(t)}${u(a)}`}function C(e){const t=Math.floor((event.pageX-e.coords.left)/(e.realWidthCanvas/e.widthFrame)),a=Math.floor((event.pageY-e.coords.top)/(e.realWidthCanvas/e.widthFrame)),r=t-e.pointClick.x,n=a-e.pointClick.y;if(Math.abs(r)>0&&e.pointClick.xPrev!==r||Math.abs(n)>0&&e.pointClick.yPrev!==n){e.pointClick.xPrev=r,e.pointClick.yPrev=n;const t=e.canvasMain.getContext("2d");t.clearRect(0,0,e.canvasMain.width,e.canvasMain.height);for(let a=0;a<e.widthFrame;a++)for(let i=0;i<e.widthFrame;i++)t.fillStyle=e.arrColors[a][i],e.context.fillRect((r+i)*(e.realWidthCanvas/e.widthFrame),(n+a)*(e.realWidthCanvas/e.widthFrame),e.realWidthCanvas/e.widthFrame,e.realWidthCanvas/e.widthFrame)}}function f(e,t){const a=Math.floor((t.pageX-e.coords.left)/(e.realWidthCanvas/e.widthFrame)),r=Math.floor((t.pageY-e.coords.top)/(e.realWidthCanvas/e.widthFrame)),n=a-e.pointClick.x,i=r-e.pointClick.y;if(Math.abs(n)>2&&e.pointClick.xPrev!==n||Math.abs(i)>2&&e.pointClick.yPrev!==i){e.pointClick.xPrev=n,e.pointClick.yPrev=i;const t=e.canvasMain.getContext("2d");let o,l,s,d;t.clearRect(0,0,e.canvasMain.width,e.canvasMain.height),t.drawImage(e.MainCanvasCopyImg,0,0,e.realWidthCanvas,e.realWidthCanvas),a>e.pointClick.x?(o=e.pointClick.x,l=a):(o=a,l=e.pointClick.x),r>e.pointClick.y?(s=e.pointClick.y,d=r):(s=r,d=e.pointClick.y);const c=document.createElement("canvas");c.width=e.widthFrame,c.height=e.widthFrame,c.style.width=`${e.widthFrame}px`,c.style.height=`${e.widthFrame}px`;const h=c.getContext("2d");h.lineWidth=1,function(e,t,a){e.beginPath(),e.save(),e.translate(t[0],t[1]),e.scale(1,a[1]/a[0]),e.arc(0,0,a[0],0,2*Math.PI),e.restore(),e.strokeStyle="#ff0000",e.stroke(),e.closePath()}(h,[o+(l-o)/2,s+(d-s)/2],[(l-o)/2,(d-s)/2]),e.arrColors=function(e,t){const a=[];for(let r=0;r<t.widthFrame;r++){a[r]=[];for(let n=0;n<t.widthFrame;n++){const t=e.getContext("2d").getImageData(n,r,1,1).data;a[r][n]=p(...t)}}return a}(c,e);for(let t=0;t<e.widthFrame;t++)for(let a=0;a<e.widthFrame;a++)"#ff0000"===e.arrColors[t][a]&&e.context.fillRect(a*(e.realWidthCanvas/e.widthFrame),t*(e.realWidthCanvas/e.widthFrame),e.realWidthCanvas/e.widthFrame,e.realWidthCanvas/e.widthFrame)}}function y(e,t){const a=e.canvasMain.getContext("2d"),r=Math.floor((t.pageX-e.coords.left)/(e.realWidthCanvas/e.widthFrame)),n=Math.floor((t.pageY-e.coords.top)/(e.realWidthCanvas/e.widthFrame)),i=(r+n)%2;if(a.fillStyle=i?e.primaryColor:e.secondaryColor,a.fillRect(r*(e.realWidthCanvas/e.widthFrame),n*(e.realWidthCanvas/e.widthFrame),e.realWidthCanvas/e.widthFrame,e.realWidthCanvas/e.widthFrame),e.prevPoint.x){const t=r-e.prevPoint.x,i=n-e.prevPoint.y;let o,l;if(Math.abs(t)>Math.abs(i)&&Math.abs(t)>1){l=i;for(let r=(o=t)/Math.abs(o);Math.abs(r)<Math.abs(o);r+=o/Math.abs(o)){const t=Math.round(l*(Math.abs(r)/Math.abs(o))),n=(e.prevPoint.x+r+e.prevPoint.y+t)%2;a.fillStyle=n?e.primaryColor:e.secondaryColor,a.fillRect((e.prevPoint.x+r)*(e.realWidthCanvas/e.widthFrame),(e.prevPoint.y+t)*(e.realWidthCanvas/e.widthFrame),e.realWidthCanvas/e.widthFrame,e.realWidthCanvas/e.widthFrame)}}else if(Math.abs(i)>1){l=t;for(let t=(o=i)/Math.abs(o);Math.abs(t)<Math.abs(o);t+=o/Math.abs(o)){const r=Math.round(l*(Math.abs(t)/Math.abs(o))),n=(e.prevPoint.x+r+e.prevPoint.y+t)%2;a.fillStyle=n?e.primaryColor:e.secondaryColor,a.fillRect((e.prevPoint.x+r)*(e.realWidthCanvas/e.widthFrame),(e.prevPoint.y+t)*(e.realWidthCanvas/e.widthFrame),e.realWidthCanvas/e.widthFrame,e.realWidthCanvas/e.widthFrame)}}}e.prevPoint.x=r,e.prevPoint.y=n}function w(e,t){const a=e.canvasMain.getContext("2d"),r=Math.floor((t.pageX-e.coords.left)/(e.realWidthCanvas/e.widthFrame)),n=Math.floor((t.pageY-e.coords.top)/(e.realWidthCanvas/e.widthFrame)),i=a.getImageData(t.pageX-e.coords.left,t.pageY-e.coords.top,1,1).data,o=Array.from(i);if(o.pop(),t.ctrlKey){const e=Math.max(...o);if(0===e)return;const t=e,r=p(...o.map(e=>{const a=e-Math.ceil(10*e/t);return a<0?0:a}));a.fillStyle=r}else{const e=Math.min(...o);if(255===e)return;const t=255-e,r=p(...o.map(e=>{const a=e+Math.ceil(10*(255-e)/t);return a>255?255:a}));a.fillStyle=r}a.fillRect(r*(e.realWidthCanvas/e.widthFrame),n*(e.realWidthCanvas/e.widthFrame),e.realWidthCanvas/e.widthFrame,e.realWidthCanvas/e.widthFrame)}function F(e,t){const a=e;return()=>{if(!a.classList.contains("selected")){document.querySelector(".selected").classList.remove("selected"),a.classList.add("selected"),function(e){const t=document.getElementById("canvasMain"),a=t.getContext("2d");a.clearRect(0,0,t.width,t.height);const r=document.querySelector(".selected");a.drawImage(r,0,0,e,e)}(t)}}}function g(e){const t=document.getElementById("canvas-animation");if(t.getContext){const a=t.getContext("2d");a.clearRect(0,0,t.width,t.height);const r=e.querySelector(".img-frame-left");a.drawImage(r,0,0,160,160)}}n[80]=r.pen,n[86]=r.mirrorPen,n[66]=r.paintBucket,n[65]=r.paintAllPixels,n[69]=r.eraser,n[76]=r.stroke,n[82]=r.rectangle,n[67]=r.circle,n[77]=r.move,n[85]=r.lighten,n[84]=r.dithering,n[79]=r.colorPicker;let W=!1,M=!1,b=null;const S=[];let x=null,k=null,L=null,P=null;function E(e){let t=0,a=0;for(;e.offsetParent;)t+=e.offsetLeft+(e.currentStyle?parseInt(e.currentStyle.borderLeftWidth,10).NaN0():0),a+=e.offsetTop+(e.currentStyle?parseInt(e.currentStyle.borderTopWidth,10).NaN0():0),e=e.offsetParent;return{x:t+=e.offsetLeft+(e.currentStyle?parseInt(e.currentStyle.borderLeftWidth,10).NaN0():0),y:a+=e.offsetTop+(e.currentStyle?parseInt(e.currentStyle.borderTopWidth,10).NaN0():0)}}function I(e){let t;e=e||window.event;const a=document.querySelector(".drag-helper");let r=null;const n=e.target||e.srcElement,i=function(e){return e.pageX||e.pageY?{x:e.pageX,y:e.pageY}:{x:e.clientX+document.body.scrollLeft-document.body.clientLeft,y:e.clientY+document.body.scrollTop-document.body.clientTop}}(e);let o,l,s,d,c;k&&n!==k&&(o=k.getAttribute("origClass"))&&(k.className=o);const h=n.getAttribute("DragObj");if(null!==h&&W&&!M){for(L=(x=n).parentNode,P=x.nextSibling,d=0;d<a.childNodes.length;d+=1)a.removeChild(a.childNodes[d]);for(a.appendChild(x.cloneNode(!0)),a.style.display="block",a.classList.add("drag-box-dragging"),a.firstChild.removeAttribute("DragObj"),l=S[h],x.setAttribute("startWidth",parseInt(x.offsetWidth,10)),x.setAttribute("startHeight",parseInt(x.offsetHeight,10)),x.style.display="none",d=0;d<l.length;d+=1)for(t=l[d],s=E(l[d]),t.setAttribute("startWidth",parseInt(t.offsetWidth,10)),t.setAttribute("startHeight",parseInt(t.offsetHeight,10)),t.setAttribute("startLeft",s.x),t.setAttribute("startTop",s.y),c=0;c<l[d].childNodes.length;c+=1)"#text"!==(t=l[d].childNodes[c]).nodeName&&l[d].childNodes[c]!==x&&(s=E(l[d].childNodes[c]),t.setAttribute("startWidth",parseInt(t.offsetWidth,10)),t.setAttribute("startHeight",parseInt(t.offsetHeight,10)),t.setAttribute("startLeft",s.x),t.setAttribute("startTop",s.y))}if(x){a.style.top=`${i.y}px`,a.style.left=`${i.x}px`,l=S[x.getAttribute("DragObj")];const e=i.x+parseInt(x.getAttribute("startWidth"),10)/2,n=i.y+parseInt(x.getAttribute("startHeight"),10)/2;for(d=0;d<l.length;d+=1)r=l[d];let o=null;for(d=r.childNodes.length-1;d>=0;d-=1)"#text"!==(t=r.childNodes[d]).nodeName&&x!==r.childNodes[d]&&parseInt(t.getAttribute("startLeft"),10)+parseInt(t.getAttribute("startWidth"),10)>e&&parseInt(t.getAttribute("startTop"),10)+parseInt(t.getAttribute("startHeight"),10)>n&&(o=r.childNodes[d]);o?o!==x.nextSibling&&r.insertBefore(x,o):(x.nextSibling||x.parentNode!==r)&&r.appendChild(x),""!==x.style.display&&(x.style.display="",x.style.visibility="hidden")}if(M=W,k=n,b&&(b.style.position="absolute",b.style.top=i.y,b.style.left=i.x),M=W,x||b)return!1}function q(e,t){!function(e){let t=0;const a=S.length;for(S[a]=[],e.setAttribute("DropObj",a),S[a].push(e),t=0;t<e.childNodes.length;t+=1)"#text"!==e.childNodes[t].nodeName&&e.childNodes[t].setAttribute("DragObj",a)}(document.querySelector(e));const a=document.createElement("div");a.style.cssText="position: absolute; display: none;",a.classList.add("drag-helper"),document.body.appendChild(a),document.addEventListener("mousemove",()=>{I()}),document.addEventListener("mousedown",()=>{!function(e){const t=(e=e||window.event).target||e.srcElement;if(W=!0,t.onmousedown||t.getAttribute("DragObj"));}()}),document.addEventListener("mouseup",()=>{!function(){const e=document.querySelector(".drag-helper");x&&(e.style.display="none","none"===x.style.display&&(P?L.insertBefore(x,P):L.appendChild(x)),x.style.display="",x.style.visibility="visible"),x=null,b=null,W=!1}(),t.length=0;const e=document.querySelector(".imgs-block").querySelectorAll(".img-wrap");for(let a=0;a<e.length;a++)t[a]=e[a]})}function R(e,t){let a;if(e.canvasMain.getContext("2d").clearRect(0,0,e.canvasMain.width,e.canvasMain.height),void 0===t)(a=document.createElement("img")).className="img-frame-left";else{const e=t.querySelector(".img-frame-left").cloneNode(!0);(a=e).classList.remove("selected")}const r=document.querySelector(".frames-imgs"),n=document.createElement("div");n.className="img-wrap",n.innerHTML="move";const i=document.createElement("button");i.innerHTML="del",i.className="delete-frame",i.addEventListener("click",()=>{if(1===e.arrFrames.length)return void alert("can not delete last frame");if(a.classList.contains("selected")){F(document.querySelector(".img-frame-left"),e.realWidthCanvas)()}n.parentNode.removeChild(n);const t=e.arrFrames.indexOf(n);e.arrFrames.splice(t,1)});const o=document.createElement("button");o.innerHTML="copy",o.className="copy-frame",o.addEventListener("click",()=>{R(e,n)});const l=document.createElement("div");l.className="but-img-wrap",l.appendChild(i),l.appendChild(o),n.appendChild(a),n.appendChild(l),r.appendChild(n),F(a,e.realWidthCanvas)(),a.addEventListener("click",F(a,e.realWidthCanvas)),e.arrFrames.push(n),clearInterval(e.interval),e.interval=setInterval(()=>{g(e.arrFrames[e.countFrames%e.arrFrames.length]),e.countFrames+=1},1e3/e.numFPS),q(".frames-imgs",e.arrFrames)}function T(e){const t=document.getElementById(e);t.webkitRequestFullScreen?t.webkitRequestFullScreen(Element.ALLOW_KEYBOARD_INPUT):t.mozRequestFullScreen(),document.querySelector("#button-fullScreen").onclick=()=>{!function(e){document.cancelFullScreen(),document.querySelector("#button-fullScreen").onclick=()=>{T(e)}}(e)}}document.cancelFullScreen=document.cancelFullScreen||document.webkitCancelFullScreen;const N=JSON.parse(localStorage.getItem("object"));console.log(N);const A={};var B;A.numFPS=1,A.countFrames=0,A.selectedTool=r.pen,A.realWidthCanvas=320,A.widthFrame=32,A.arrFrames=[],A.prevPoint={},A.canvasMain=document.getElementById("canvasMain"),A.coords=A.canvasMain.getBoundingClientRect(),A.context=A.canvasMain.getContext("2d"),A.pointClick={},A.arrKeys=n,B=A,document.getElementById("lineFPS").addEventListener("click",()=>{!function(e,t){const a=document.getElementById("lineFPS").value;document.getElementById("displayFPS").innerHTML=`${a} FPS`,e.numFPS=a,clearInterval(e.interval),e.interval=setInterval(()=>{g(t[e.countFrames%t.length]),e.countFrames+=1},1e3/e.numFPS)}(B,B.arrFrames)}),document.getElementById("button-fullScreen").addEventListener("click",()=>{T("canvas-animation")}),function(e){const t=document.getElementById("myModal"),a=document.getElementById("myBtn"),r=document.getElementsByClassName("close")[0];a.onclick=()=>{t.style.display="block"},r.onclick=()=>{t.style.display="none"},window.onclick=e=>{e.target===t&&(t.style.display="none")};const n=document.getElementsByClassName("key-icon");Array.from(n).forEach(e=>{e.addEventListener("click",e=>{e.target.classList.contains("key-icon")&&e.target.classList.add("selected-key")})}),document.addEventListener("keydown",t=>{const a=document.getElementById("myModal");if("block"!==a.style.display)e.arrKeys[t.keyCode]&&i(e.arrKeys[t.keyCode],e);else{const r=a.querySelector(".selected-key");if(r){if(e.arrKeys[t.keyCode])return alert("this key is already reserved"),void r.classList.remove("selected-key");const a=e.arrKeys[r.querySelector("span").innerHTML.charCodeAt(0)];e.arrKeys[r.querySelector("span").innerHTML.charCodeAt(0)]=null,e.arrKeys[t.keyCode]=a,r.querySelector("span").innerHTML=String.fromCharCode(t.keyCode),r.classList.remove("selected-key")}}})}(A),document.addEventListener("contextmenu",e=>{e.preventDefault()}),function(e){e.canvasMain.addEventListener("mousedown",t=>{const a=e.canvasMain.getContext("2d"),n=document.querySelector("body");if(e.selectedTool===r.pen){let r,i,s;1===t.which?a.fillStyle=e.primaryColor:a.fillStyle=e.secondaryColor,o(e,t),e.canvasMain.addEventListener("mousemove",r=t=>{o(e,t)}),e.canvasMain.addEventListener("mouseout",i=()=>{l(e)}),n.addEventListener("mouseup",s=()=>{d(e,r,i,s)})}if(e.selectedTool===r.eraser){let r,i,s;t.which,a.fillStyle="#000000",o(e,t),e.canvasMain.addEventListener("mousemove",r=t=>{o(e,t)}),e.canvasMain.addEventListener("mouseout",i=()=>{l(e)}),n.addEventListener("mouseup",s=()=>{d(e,r,i,s)})}if(e.selectedTool===r.mirrorPen){let r,i,o;1===t.which?a.fillStyle=e.primaryColor:a.fillStyle=e.secondaryColor,c(e,t),e.canvasMain.addEventListener("mousemove",r=t=>{c(e,t)}),e.canvasMain.addEventListener("mouseout",i=()=>{l(e)}),n.addEventListener("mouseup",o=()=>{d(e,r,i,o)})}if(e.selectedTool===r.stroke){let r,i,o;1===t.which?a.fillStyle=e.primaryColor:a.fillStyle=e.secondaryColor,v(e.pointClick,e),a.fillRect(e.pointClick.x*(e.realWidthCanvas/e.widthFrame),e.pointClick.y*(e.realWidthCanvas/e.widthFrame),e.realWidthCanvas/e.widthFrame,e.realWidthCanvas/e.widthFrame),e.MainCanvasCopyImg=document.createElement("img"),e.MainCanvasCopyImg.src=e.canvasMain.toDataURL(),e.canvasMain.addEventListener("mousemove",r=t=>{!function(e,t){const a=e.canvasMain.getContext("2d");a.clearRect(0,0,e.canvasMain.width,e.canvasMain.height),a.drawImage(e.MainCanvasCopyImg,0,0,e.realWidthCanvas,e.realWidthCanvas);const r=Math.floor((t.pageX-e.coords.left)/(e.realWidthCanvas/e.widthFrame)),n=Math.floor((t.pageY-e.coords.top)/(e.realWidthCanvas/e.widthFrame));e.context.fillRect(r*(e.realWidthCanvas/e.widthFrame),n*(e.realWidthCanvas/e.widthFrame),e.realWidthCanvas/e.widthFrame,e.realWidthCanvas/e.widthFrame);const i=r-e.pointClick.x,o=n-e.pointClick.y;let l,s;if(Math.abs(i)>Math.abs(o)){s=o;for(let t=(l=i)/Math.abs(l);Math.abs(t)<Math.abs(l);t+=l/Math.abs(l)){const a=Math.round(s*(Math.abs(t)/Math.abs(l)));e.context.fillRect((e.pointClick.x+t)*(e.realWidthCanvas/e.widthFrame),(e.pointClick.y+a)*(e.realWidthCanvas/e.widthFrame),e.realWidthCanvas/e.widthFrame,e.realWidthCanvas/e.widthFrame)}}else{s=i;for(let t=(l=o)/Math.abs(l);Math.abs(t)<Math.abs(l);t+=l/Math.abs(l)){const a=Math.round(s*(Math.abs(t)/Math.abs(l)));e.context.fillRect((e.pointClick.x+a)*(e.realWidthCanvas/e.widthFrame),(e.pointClick.y+t)*(e.realWidthCanvas/e.widthFrame),e.realWidthCanvas/e.widthFrame,e.realWidthCanvas/e.widthFrame)}}}(e,t)}),e.canvasMain.addEventListener("mouseout",i=()=>{l(e)}),n.addEventListener("mouseup",o=()=>{d(e,r,i,o)})}if(e.selectedTool===r.paintBucket&&(1===t.which?a.fillStyle=e.primaryColor:a.fillStyle=e.secondaryColor,function(e,t){const a=[[Math.floor((t.pageX-e.coords.left)/(e.realWidthCanvas/e.widthFrame)),Math.floor((t.pageY-e.coords.top)/(e.realWidthCanvas/e.widthFrame))]],r=e.canvasMain.getContext("2d").getImageData(t.pageX-e.coords.left,t.pageY-e.coords.top,1,1).data;for(;a.length;){let t,n;const i=a.pop(),o=i[0];let l=i[1];for(;l>=0&&h(o,l,r,e);)l-=1;for(l+=1,t=!1,n=!1;l<e.widthFrame&&h(o,l,r,e);)m(o,l,e),o>0&&(h(o-1,l,r,e)?t||(a.push([o-1,l]),t=!0):t&&(t=!1)),o<e.widthFrame-1&&(h(o+1,l,r,e)?n||(a.push([o+1,l]),n=!0):n&&(n=!1)),l+=1}}(e,t)),e.selectedTool===r.paintAllPixels&&(1===t.which?a.fillStyle=e.primaryColor:a.fillStyle=e.secondaryColor,function(e,t){const a=e.canvasMain.getContext("2d").getImageData(t.pageX-e.coords.left,t.pageY-e.coords.top,1,1).data;for(let t=0;t<e.widthFrame;t++)for(let r=0;r<e.widthFrame;r++)h(r,t,a,e)&&m(r,t,e)}(e,t)),e.selectedTool===r.move){let t,a,r;v(e.pointClick,e),e.arrColors=function(e,t){const a=[];for(let r=0;r<t.widthFrame;r++){a[r]=[];for(let n=0;n<t.widthFrame;n++){const i=e.getContext("2d").getImageData(n*(t.realWidthCanvas/t.widthFrame),r*(t.realWidthCanvas/t.widthFrame),1,1).data;a[r][n]=p(...i)}}return a}(e.canvasMain,e),e.canvasMain.addEventListener("mousemove",t=t=>{C(e)}),e.canvasMain.addEventListener("mouseout",a=()=>{l(e)}),n.addEventListener("mouseup",r=()=>{d(e,t,a,r)})}if(e.selectedTool===r.rectangle){let r,i,o;1===t.which?a.fillStyle=e.primaryColor:a.fillStyle=e.secondaryColor,v(e.pointClick,e),a.fillRect(e.pointClick.x*(e.realWidthCanvas/e.widthFrame),e.pointClick.y*(e.realWidthCanvas/e.widthFrame),e.realWidthCanvas/e.widthFrame,e.realWidthCanvas/e.widthFrame),e.MainCanvasCopyImg=document.createElement("img"),e.MainCanvasCopyImg.src=e.canvasMain.toDataURL(),e.canvasMain.addEventListener("mousemove",r=t=>{!function(e,t){const a=Math.floor((t.pageX-e.coords.left)/(e.realWidthCanvas/e.widthFrame)),r=Math.floor((t.pageY-e.coords.top)/(e.realWidthCanvas/e.widthFrame)),n=a-e.pointClick.x,i=r-e.pointClick.y;if(e.pointClick.xPrev!==n||e.pointClick.yPrev!==i){e.pointClick.xPrev=n,e.pointClick.yPrev=i;const t=e.canvasMain.getContext("2d");let o,l,s,d;t.clearRect(0,0,e.canvasMain.width,e.canvasMain.height),t.drawImage(e.MainCanvasCopyImg,0,0,e.realWidthCanvas,e.realWidthCanvas),a>e.pointClick.x?(o=e.pointClick.x,l=a):(o=a,l=e.pointClick.x),r>e.pointClick.y?(s=e.pointClick.y,d=r):(s=r,d=e.pointClick.y);for(let a=s;a<=d;a++)t.fillRect(o*(e.realWidthCanvas/e.widthFrame),a*(e.realWidthCanvas/e.widthFrame),e.realWidthCanvas/e.widthFrame,e.realWidthCanvas/e.widthFrame),t.fillRect(l*(e.realWidthCanvas/e.widthFrame),a*(e.realWidthCanvas/e.widthFrame),e.realWidthCanvas/e.widthFrame,e.realWidthCanvas/e.widthFrame);for(let a=o;a<=l;a++)t.fillRect(a*(e.realWidthCanvas/e.widthFrame),s*(e.realWidthCanvas/e.widthFrame),e.realWidthCanvas/e.widthFrame,e.realWidthCanvas/e.widthFrame),t.fillRect(a*(e.realWidthCanvas/e.widthFrame),d*(e.realWidthCanvas/e.widthFrame),e.realWidthCanvas/e.widthFrame,e.realWidthCanvas/e.widthFrame)}}(e,t)}),e.canvasMain.addEventListener("mouseout",i=()=>{l(e)}),n.addEventListener("mouseup",o=()=>{d(e,r,i,o)})}if(e.selectedTool===r.circle){let r,i,o;1===t.which?a.fillStyle=e.primaryColor:a.fillStyle=e.secondaryColor,v(e.pointClick,e),e.MainCanvasCopyImg=document.createElement("img"),e.MainCanvasCopyImg.src=e.canvasMain.toDataURL(),e.canvasMain.addEventListener("mousemove",r=t=>{f(e,t)}),e.canvasMain.addEventListener("mouseout",i=()=>{l(e)}),n.addEventListener("mouseup",o=()=>{d(e,r,i,o)})}if(e.selectedTool===r.dithering){let a,r,i;y(e,t),e.canvasMain.addEventListener("mousemove",a=t=>{y(e,t)}),e.canvasMain.addEventListener("mouseout",r=()=>{l(e)}),n.addEventListener("mouseup",i=()=>{d(e,a,r,i)})}if(e.selectedTool===r.lighten){let a,r,i;w(e,t),e.canvasMain.addEventListener("mousemove",a=t=>{w(e,t)}),e.canvasMain.addEventListener("mouseout",r=()=>{l(e)}),n.addEventListener("mouseup",i=()=>{d(e,a,r,i)})}if(e.selectedTool===r.colorPicker){const r=p(...a.getImageData(t.pageX-e.coords.left,t.pageY-e.coords.top,1,1).data);a.fillStyle=r,1===t.which?(e.primaryColor=r,document.querySelector(".color-picker-first").value=r):3===t.which&&(e.secondaryColor=r,document.querySelector(".color-picker-second").value=r)}s(e.canvasMain)})}(A),function(e){clearInterval(e.interval),e.interval=setInterval(()=>{g(e.arrFrames[e.countFrames%e.arrFrames.length]),e.countFrames+=1},1e3/e.numFPS)}(A),function(e){e.arrFrames.push(document.querySelector(".img-wrap")),document.getElementById("add-frame").addEventListener("click",()=>{R(e)});const t=document.querySelectorAll(".img-frame-left");for(let a=0;a<t.length;a+=1){const r=t[a];r.addEventListener("click",F(r,e.realWidthCanvas))}const a=document.querySelector(".img-wrap"),r=document.querySelector(".img-frame-left");document.querySelector(".delete-frame").addEventListener("click",()=>{if(1===e.arrFrames.length)return void alert("can not delete last frame");r.classList.contains("selected")&&F(document.querySelector(".img-frame-left"),e.realWidthCanvas)(),a.parentNode.removeChild(a);const t=e.arrFrames.indexOf(a);e.arrFrames.splice(t,1)}),document.querySelector(".copy-frame").addEventListener("click",()=>{R(e,a)})}(A),function(e){!function(e){e.primaryColor="#00ff00",document.querySelector(".color-picker-first").value=e.primaryColor,e.secondaryColor="#0000ff",document.querySelector(".color-picker-second").value=e.secondaryColor,document.querySelector(".color-picker-first").oninput=()=>{e.primaryColor=document.querySelector(".color-picker-first").value},document.querySelector(".color-picker-second").oninput=()=>{e.secondaryColor=document.querySelector(".color-picker-second").value}}(e),document.querySelector(".tools-block").addEventListener("click",t=>{t.target.classList.contains("tool-icon")&&i(t.target,e),t.target.parentNode.classList.contains("tool-icon")&&i(t.target.parentNode,e)}),document.querySelector(".tools-block").addEventListener("mouseover",e=>{let t;if(e.target.parentNode.classList.contains("tool-icon")?t=e.target.parentNode:e.target.classList.contains("tool-icon")&&(t=e.target),t){const e=document.createElement("div");e.id="toolTip",e.innerHTML=function(e){return{pen:"pen tool","vertical mirror pen":"CTRL - horizontal axis; SHIFT - horizontal and vertical axiz","paint bucket":"paint bucket","paint all pixels of the same color":"paint all pixels of the same color",eraser:"eraser",stroke:"stroke",move:"move",rectangle:"rectangle",circle:"circle",lighten:"CTRL - darken",dithering:"dithering","color picker":"color picker"}[e]}(t.querySelector("p").innerHTML),e.classList.add("tooltip-class"),t.appendChild(e)}}),document.querySelector(".tools-block").addEventListener("mouseout",e=>{let t;e.target.parentNode.classList.contains("tool-icon")?t=e.target.parentNode:e.target.classList.contains("tool-icon")&&(t=e.target),t&&document.getElementById("toolTip").remove()})}(A),function(e){function t(t){const a=document.createElement("canvas"),r=a.getContext("2d");a.width=e.canvasMain.width,a.height=e.canvasMain.height;const n=e.realWidthCanvas*(t/e.widthFrame),i=document.querySelectorAll(".img-frame-left");for(let t=0;t<i.length;t++){if(i[t].classList.contains("selected")){const a=e.canvasMain.getContext("2d");a.clearRect(0,0,e.canvasMain.width,e.canvasMain.height),a.drawImage(i[t],0,0,n,n)}r.drawImage(i[t],0,0,n,n),i[t].src=a.toDataURL(),r.clearRect(0,0,a.width,a.height)}}document.querySelector("#resize32").onclick=()=>{const a=e.widthFrame;e.widthFrame=32,t(a)},document.querySelector("#resize64").onclick=()=>{const a=e.widthFrame;e.widthFrame=64,t(a)},document.querySelector("#resize128").onclick=()=>{const a=e.widthFrame;e.widthFrame=128,t(a)}}(A),setInterval(()=>{const e=JSON.stringify(A);localStorage.setItem("object",e)},5e3)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,